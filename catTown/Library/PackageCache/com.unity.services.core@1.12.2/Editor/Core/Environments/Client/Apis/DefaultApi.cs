//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Core.Environments.Client.Models;
using Unity.Services.Core.Environments.Client.Http;
using Unity.Services.Core.Environments.Client.Default;

namespace Unity.Services.Core.Environments.Client.Apis.Default
{
    /// <summary>
    /// Interface for the DefaultApiClient
    /// </summary>
    internal interface IDefaultApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Unarchive a project.
            /// </summary>
            /// <param name="request">Request object for ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDelete.</param>
            /// <param name="operationConfiguration">Configuration for ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDelete.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityProjectV1>> ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDeleteAsync(Unity.Services.Core.Environments.Client.Default.ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDeleteRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Archive a project.
            /// </summary>
            /// <param name="request">Request object for ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePut.</param>
            /// <param name="operationConfiguration">Configuration for ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePut.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityProjectV1>> ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePutAsync(Unity.Services.Core.Environments.Client.Default.ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePutRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create an address for an organization.
            /// </summary>
            /// <param name="request">Request object for UnityCreateAddress.</param>
            /// <param name="operationConfiguration">Configuration for UnityCreateAddress.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityAddressV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityAddressV1>> UnityCreateAddressAsync(Unity.Services.Core.Environments.Client.Default.UnityCreateAddressRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create an environment for the project.
            /// </summary>
            /// <param name="request">Request object for UnityCreateEnvironment.</param>
            /// <param name="operationConfiguration">Configuration for UnityCreateEnvironment.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityEnvironmentV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityEnvironmentV1>> UnityCreateEnvironmentAsync(Unity.Services.Core.Environments.Client.Default.UnityCreateEnvironmentRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Favorite a project for a user.
            /// </summary>
            /// <param name="request">Request object for UnityCreateFavoriteProject.</param>
            /// <param name="operationConfiguration">Configuration for UnityCreateFavoriteProject.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityProjectV1>> UnityCreateFavoriteProjectAsync(Unity.Services.Core.Environments.Client.Default.UnityCreateFavoriteProjectRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create a new organization.
            /// </summary>
            /// <param name="request">Request object for UnityCreateOrganization.</param>
            /// <param name="operationConfiguration">Configuration for UnityCreateOrganization.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityOrganizationV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityOrganizationV1>> UnityCreateOrganizationAsync(Unity.Services.Core.Environments.Client.Default.UnityCreateOrganizationRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create a new project.
            /// </summary>
            /// <param name="request">Request object for UnityCreateProject.</param>
            /// <param name="operationConfiguration">Configuration for UnityCreateProject.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityProjectV1>> UnityCreateProjectAsync(Unity.Services.Core.Environments.Client.Default.UnityCreateProjectRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete an environment of a project.
            /// </summary>
            /// <param name="request">Request object for UnityDeleteEnvironment.</param>
            /// <param name="operationConfiguration">Configuration for UnityDeleteEnvironment.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> UnityDeleteEnvironmentAsync(Unity.Services.Core.Environments.Client.Default.UnityDeleteEnvironmentRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Unfavorite a project for a user.
            /// </summary>
            /// <param name="request">Request object for UnityDeleteFavoriteProject.</param>
            /// <param name="operationConfiguration">Configuration for UnityDeleteFavoriteProject.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> UnityDeleteFavoriteProjectAsync(Unity.Services.Core.Environments.Client.Default.UnityDeleteFavoriteProjectRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get an environment of a project.
            /// </summary>
            /// <param name="request">Request object for UnityGetEnvironment.</param>
            /// <param name="operationConfiguration">Configuration for UnityGetEnvironment.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityEnvironmentV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityEnvironmentV1>> UnityGetEnvironmentAsync(Unity.Services.Core.Environments.Client.Default.UnityGetEnvironmentRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List environments for a project.
            /// </summary>
            /// <param name="request">Request object for UnityGetEnvironments.</param>
            /// <param name="operationConfiguration">Configuration for UnityGetEnvironments.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityGetEnvironments200Response object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityGetEnvironments200Response>> UnityGetEnvironmentsAsync(Unity.Services.Core.Environments.Client.Default.UnityGetEnvironmentsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get an organization.
            /// </summary>
            /// <param name="request">Request object for UnityGetOrganization.</param>
            /// <param name="operationConfiguration">Configuration for UnityGetOrganization.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityOrganizationWithAddressV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityOrganizationWithAddressV1>> UnityGetOrganizationAsync(Unity.Services.Core.Environments.Client.Default.UnityGetOrganizationRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List members belonging to an organization.
            /// </summary>
            /// <param name="request">Request object for UnityGetOrganizationMembers.</param>
            /// <param name="operationConfiguration">Configuration for UnityGetOrganizationMembers.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityGetOrganizationMembers200Response object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityGetOrganizationMembers200Response>> UnityGetOrganizationMembersAsync(Unity.Services.Core.Environments.Client.Default.UnityGetOrganizationMembersRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get a project (v1).
            /// </summary>
            /// <param name="request">Request object for UnityGetProjectV1.</param>
            /// <param name="operationConfiguration">Configuration for UnityGetProjectV1.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityProjectV1>> UnityGetProjectV1Async(Unity.Services.Core.Environments.Client.Default.UnityGetProjectV1Request request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get a list of user&#39;s guest projects.
            /// </summary>
            /// <param name="request">Request object for UnityGetUserGuestProjects.</param>
            /// <param name="operationConfiguration">Configuration for UnityGetUserGuestProjects.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityGetUserGuestProjects200Response object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityGetUserGuestProjects200Response>> UnityGetUserGuestProjectsAsync(Unity.Services.Core.Environments.Client.Default.UnityGetUserGuestProjectsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get user with a list of user&#39;s organizations.
            /// </summary>
            /// <param name="request">Request object for UnityGetUserOrganizations.</param>
            /// <param name="operationConfiguration">Configuration for UnityGetUserOrganizations.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityUserOrganizationsV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityUserOrganizationsV1>> UnityGetUserOrganizationsAsync(Unity.Services.Core.Environments.Client.Default.UnityGetUserOrganizationsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Lists permissions of the user for a resource.
            /// </summary>
            /// <param name="request">Request object for UnityGetUserPermissions.</param>
            /// <param name="operationConfiguration">Configuration for UnityGetUserPermissions.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityGetUserPermissions200Response object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityGetUserPermissions200Response>> UnityGetUserPermissionsAsync(Unity.Services.Core.Environments.Client.Default.UnityGetUserPermissionsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List favorite projects for a user.
            /// </summary>
            /// <param name="request">Request object for UnityListFavoriteProjects.</param>
            /// <param name="operationConfiguration">Configuration for UnityListFavoriteProjects.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityListOrganizationFavoriteProjects200Response object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityListOrganizationFavoriteProjects200Response>> UnityListFavoriteProjectsAsync(Unity.Services.Core.Environments.Client.Default.UnityListFavoriteProjectsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List favorite projects for a user in an organization.
            /// </summary>
            /// <param name="request">Request object for UnityListOrganizationFavoriteProjects.</param>
            /// <param name="operationConfiguration">Configuration for UnityListOrganizationFavoriteProjects.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityListOrganizationFavoriteProjects200Response object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityListOrganizationFavoriteProjects200Response>> UnityListOrganizationFavoriteProjectsAsync(Unity.Services.Core.Environments.Client.Default.UnityListOrganizationFavoriteProjectsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List projects for an organization.
            /// </summary>
            /// <param name="request">Request object for UnityListProjects.</param>
            /// <param name="operationConfiguration">Configuration for UnityListProjects.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityListProjects200Response object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityListProjects200Response>> UnityListProjectsAsync(Unity.Services.Core.Environments.Client.Default.UnityListProjectsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update a project (v1).
            /// </summary>
            /// <param name="request">Request object for UnityPatchProjectV1.</param>
            /// <param name="operationConfiguration">Configuration for UnityPatchProjectV1.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityProjectV1>> UnityPatchProjectV1Async(Unity.Services.Core.Environments.Client.Default.UnityPatchProjectV1Request request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Transfer a project.
            /// </summary>
            /// <param name="request">Request object for UnityTransferProject.</param>
            /// <param name="operationConfiguration">Configuration for UnityTransferProject.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityProjectV1>> UnityTransferProjectAsync(Unity.Services.Core.Environments.Client.Default.UnityTransferProjectRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update an organization.
            /// </summary>
            /// <param name="request">Request object for UnityUpdateOrganization.</param>
            /// <param name="operationConfiguration">Configuration for UnityUpdateOrganization.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityOrganizationWithAddressV1 object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityOrganizationWithAddressV1>> UnityUpdateOrganizationAsync(Unity.Services.Core.Environments.Client.Default.UnityUpdateOrganizationRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Upload an icon (v1).
            /// </summary>
            /// <param name="request">Request object for UnityUploadIconV1.</param>
            /// <param name="operationConfiguration">Configuration for UnityUploadIconV1.</param>
            /// <returns>Task for a Response object containing status code, headers, and UnityUploadIconV1201Response object.</returns>
            /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UnityUploadIconV1201Response>> UnityUploadIconV1Async(Unity.Services.Core.Environments.Client.Default.UnityUploadIconV1Request request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IDefaultApiClient"/>
    internal class DefaultApiClient : BaseApiClient, IDefaultApiClient
    {
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://services.unity.com", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// DefaultApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for DefaultApiClient.</param>
        /// <param name="configuration"> DefaultApiClient Configuration object.</param>
        public DefaultApiClient(IHttpClient httpClient,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            
        }


        /// <summary>
        /// Async Operation.
        /// Unarchive a project.
        /// </summary>
        /// <param name="request">Request object for ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDelete.</param>
        /// <param name="operationConfiguration">Configuration for ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDelete.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityProjectV1>> ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDeleteAsync(Unity.Services.Core.Environments.Client.Default.ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDeleteRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityProjectV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityProjectV1>(response, statusCodeToTypeMap);
            return new Response<UnityProjectV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Archive a project.
        /// </summary>
        /// <param name="request">Request object for ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePut.</param>
        /// <param name="operationConfiguration">Configuration for ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePut.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityProjectV1>> ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePutAsync(Unity.Services.Core.Environments.Client.Default.ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePutRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityProjectV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityProjectV1>(response, statusCodeToTypeMap);
            return new Response<UnityProjectV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create an address for an organization.
        /// </summary>
        /// <param name="request">Request object for UnityCreateAddress.</param>
        /// <param name="operationConfiguration">Configuration for UnityCreateAddress.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityAddressV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityAddressV1>> UnityCreateAddressAsync(Unity.Services.Core.Environments.Client.Default.UnityCreateAddressRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201", typeof(UnityAddressV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityAddressV1>(response, statusCodeToTypeMap);
            return new Response<UnityAddressV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create an environment for the project.
        /// </summary>
        /// <param name="request">Request object for UnityCreateEnvironment.</param>
        /// <param name="operationConfiguration">Configuration for UnityCreateEnvironment.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityEnvironmentV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityEnvironmentV1>> UnityCreateEnvironmentAsync(Unity.Services.Core.Environments.Client.Default.UnityCreateEnvironmentRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201", typeof(UnityEnvironmentV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityEnvironmentV1>(response, statusCodeToTypeMap);
            return new Response<UnityEnvironmentV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Favorite a project for a user.
        /// </summary>
        /// <param name="request">Request object for UnityCreateFavoriteProject.</param>
        /// <param name="operationConfiguration">Configuration for UnityCreateFavoriteProject.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityProjectV1>> UnityCreateFavoriteProjectAsync(Unity.Services.Core.Environments.Client.Default.UnityCreateFavoriteProjectRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201", typeof(UnityProjectV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityProjectV1>(response, statusCodeToTypeMap);
            return new Response<UnityProjectV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create a new organization.
        /// </summary>
        /// <param name="request">Request object for UnityCreateOrganization.</param>
        /// <param name="operationConfiguration">Configuration for UnityCreateOrganization.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityOrganizationV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityOrganizationV1>> UnityCreateOrganizationAsync(Unity.Services.Core.Environments.Client.Default.UnityCreateOrganizationRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201", typeof(UnityOrganizationV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityOrganizationV1>(response, statusCodeToTypeMap);
            return new Response<UnityOrganizationV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create a new project.
        /// </summary>
        /// <param name="request">Request object for UnityCreateProject.</param>
        /// <param name="operationConfiguration">Configuration for UnityCreateProject.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityProjectV1>> UnityCreateProjectAsync(Unity.Services.Core.Environments.Client.Default.UnityCreateProjectRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201", typeof(UnityProjectV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityProjectV1>(response, statusCodeToTypeMap);
            return new Response<UnityProjectV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Delete an environment of a project.
        /// </summary>
        /// <param name="request">Request object for UnityDeleteEnvironment.</param>
        /// <param name="operationConfiguration">Configuration for UnityDeleteEnvironment.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> UnityDeleteEnvironmentAsync(Unity.Services.Core.Environments.Client.Default.UnityDeleteEnvironmentRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Unfavorite a project for a user.
        /// </summary>
        /// <param name="request">Request object for UnityDeleteFavoriteProject.</param>
        /// <param name="operationConfiguration">Configuration for UnityDeleteFavoriteProject.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> UnityDeleteFavoriteProjectAsync(Unity.Services.Core.Environments.Client.Default.UnityDeleteFavoriteProjectRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Get an environment of a project.
        /// </summary>
        /// <param name="request">Request object for UnityGetEnvironment.</param>
        /// <param name="operationConfiguration">Configuration for UnityGetEnvironment.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityEnvironmentV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityEnvironmentV1>> UnityGetEnvironmentAsync(Unity.Services.Core.Environments.Client.Default.UnityGetEnvironmentRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityEnvironmentV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityEnvironmentV1>(response, statusCodeToTypeMap);
            return new Response<UnityEnvironmentV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// List environments for a project.
        /// </summary>
        /// <param name="request">Request object for UnityGetEnvironments.</param>
        /// <param name="operationConfiguration">Configuration for UnityGetEnvironments.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityGetEnvironments200Response object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityGetEnvironments200Response>> UnityGetEnvironmentsAsync(Unity.Services.Core.Environments.Client.Default.UnityGetEnvironmentsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityGetEnvironments200Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityGetEnvironments200Response>(response, statusCodeToTypeMap);
            return new Response<UnityGetEnvironments200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get an organization.
        /// </summary>
        /// <param name="request">Request object for UnityGetOrganization.</param>
        /// <param name="operationConfiguration">Configuration for UnityGetOrganization.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityOrganizationWithAddressV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityOrganizationWithAddressV1>> UnityGetOrganizationAsync(Unity.Services.Core.Environments.Client.Default.UnityGetOrganizationRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityOrganizationWithAddressV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityOrganizationWithAddressV1>(response, statusCodeToTypeMap);
            return new Response<UnityOrganizationWithAddressV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// List members belonging to an organization.
        /// </summary>
        /// <param name="request">Request object for UnityGetOrganizationMembers.</param>
        /// <param name="operationConfiguration">Configuration for UnityGetOrganizationMembers.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityGetOrganizationMembers200Response object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityGetOrganizationMembers200Response>> UnityGetOrganizationMembersAsync(Unity.Services.Core.Environments.Client.Default.UnityGetOrganizationMembersRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityGetOrganizationMembers200Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityGetOrganizationMembers200Response>(response, statusCodeToTypeMap);
            return new Response<UnityGetOrganizationMembers200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get a project (v1).
        /// </summary>
        /// <param name="request">Request object for UnityGetProjectV1.</param>
        /// <param name="operationConfiguration">Configuration for UnityGetProjectV1.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityProjectV1>> UnityGetProjectV1Async(Unity.Services.Core.Environments.Client.Default.UnityGetProjectV1Request request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityProjectV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityProjectV1>(response, statusCodeToTypeMap);
            return new Response<UnityProjectV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get a list of user&#39;s guest projects.
        /// </summary>
        /// <param name="request">Request object for UnityGetUserGuestProjects.</param>
        /// <param name="operationConfiguration">Configuration for UnityGetUserGuestProjects.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityGetUserGuestProjects200Response object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityGetUserGuestProjects200Response>> UnityGetUserGuestProjectsAsync(Unity.Services.Core.Environments.Client.Default.UnityGetUserGuestProjectsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityGetUserGuestProjects200Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityGetUserGuestProjects200Response>(response, statusCodeToTypeMap);
            return new Response<UnityGetUserGuestProjects200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get user with a list of user&#39;s organizations.
        /// </summary>
        /// <param name="request">Request object for UnityGetUserOrganizations.</param>
        /// <param name="operationConfiguration">Configuration for UnityGetUserOrganizations.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityUserOrganizationsV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityUserOrganizationsV1>> UnityGetUserOrganizationsAsync(Unity.Services.Core.Environments.Client.Default.UnityGetUserOrganizationsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityUserOrganizationsV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityUserOrganizationsV1>(response, statusCodeToTypeMap);
            return new Response<UnityUserOrganizationsV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Lists permissions of the user for a resource.
        /// </summary>
        /// <param name="request">Request object for UnityGetUserPermissions.</param>
        /// <param name="operationConfiguration">Configuration for UnityGetUserPermissions.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityGetUserPermissions200Response object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityGetUserPermissions200Response>> UnityGetUserPermissionsAsync(Unity.Services.Core.Environments.Client.Default.UnityGetUserPermissionsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityGetUserPermissions200Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityGetUserPermissions200Response>(response, statusCodeToTypeMap);
            return new Response<UnityGetUserPermissions200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// List favorite projects for a user.
        /// </summary>
        /// <param name="request">Request object for UnityListFavoriteProjects.</param>
        /// <param name="operationConfiguration">Configuration for UnityListFavoriteProjects.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityListOrganizationFavoriteProjects200Response object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityListOrganizationFavoriteProjects200Response>> UnityListFavoriteProjectsAsync(Unity.Services.Core.Environments.Client.Default.UnityListFavoriteProjectsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityListOrganizationFavoriteProjects200Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityListOrganizationFavoriteProjects200Response>(response, statusCodeToTypeMap);
            return new Response<UnityListOrganizationFavoriteProjects200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// List favorite projects for a user in an organization.
        /// </summary>
        /// <param name="request">Request object for UnityListOrganizationFavoriteProjects.</param>
        /// <param name="operationConfiguration">Configuration for UnityListOrganizationFavoriteProjects.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityListOrganizationFavoriteProjects200Response object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityListOrganizationFavoriteProjects200Response>> UnityListOrganizationFavoriteProjectsAsync(Unity.Services.Core.Environments.Client.Default.UnityListOrganizationFavoriteProjectsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityListOrganizationFavoriteProjects200Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityListOrganizationFavoriteProjects200Response>(response, statusCodeToTypeMap);
            return new Response<UnityListOrganizationFavoriteProjects200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// List projects for an organization.
        /// </summary>
        /// <param name="request">Request object for UnityListProjects.</param>
        /// <param name="operationConfiguration">Configuration for UnityListProjects.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityListProjects200Response object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityListProjects200Response>> UnityListProjectsAsync(Unity.Services.Core.Environments.Client.Default.UnityListProjectsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityListProjects200Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityListProjects200Response>(response, statusCodeToTypeMap);
            return new Response<UnityListProjects200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update a project (v1).
        /// </summary>
        /// <param name="request">Request object for UnityPatchProjectV1.</param>
        /// <param name="operationConfiguration">Configuration for UnityPatchProjectV1.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityProjectV1>> UnityPatchProjectV1Async(Unity.Services.Core.Environments.Client.Default.UnityPatchProjectV1Request request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityProjectV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PATCH",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityProjectV1>(response, statusCodeToTypeMap);
            return new Response<UnityProjectV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Transfer a project.
        /// </summary>
        /// <param name="request">Request object for UnityTransferProject.</param>
        /// <param name="operationConfiguration">Configuration for UnityTransferProject.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityProjectV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityProjectV1>> UnityTransferProjectAsync(Unity.Services.Core.Environments.Client.Default.UnityTransferProjectRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityProjectV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityProjectV1>(response, statusCodeToTypeMap);
            return new Response<UnityProjectV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update an organization.
        /// </summary>
        /// <param name="request">Request object for UnityUpdateOrganization.</param>
        /// <param name="operationConfiguration">Configuration for UnityUpdateOrganization.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityOrganizationWithAddressV1 object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityOrganizationWithAddressV1>> UnityUpdateOrganizationAsync(Unity.Services.Core.Environments.Client.Default.UnityUpdateOrganizationRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UnityOrganizationWithAddressV1)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityOrganizationWithAddressV1>(response, statusCodeToTypeMap);
            return new Response<UnityOrganizationWithAddressV1>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Upload an icon (v1).
        /// </summary>
        /// <param name="request">Request object for UnityUploadIconV1.</param>
        /// <param name="operationConfiguration">Configuration for UnityUploadIconV1.</param>
        /// <returns>Task for a Response object containing status code, headers, and UnityUploadIconV1201Response object.</returns>
        /// <exception cref="Unity.Services.Core.Environments.Client.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UnityUploadIconV1201Response>> UnityUploadIconV1Async(Unity.Services.Core.Environments.Client.Default.UnityUploadIconV1Request request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"201", typeof(UnityUploadIconV1201Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout,
                "BoundaryUnityUploadIconV1Boundary");

            var handledResponse = ResponseHandler.HandleAsyncResponse<UnityUploadIconV1201Response>(response, statusCodeToTypeMap);
            return new Response<UnityUploadIconV1201Response>(response, handledResponse);
        }

    }
}
